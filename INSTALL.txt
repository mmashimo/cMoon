cMoon - C++ Moon/Sun Program
----------------------------
cMoon is a simple program to show Julian date conversion with respect to Sunrise/set
and the moon phases.

Few things to note:
	- Julian date computation is not based on an ephemeris, so it could have variations in seconds
	- Daylight savings time is computed by LAT-LONG rather than by states. This can be overriden
	  by forcing timezone value into program rather than its own LAT-LONG computation (which is
	  broadly inaccurate)
	- Altitudes are set at sea-level. You can add altitudes into the command line

What you need:
-------------
Linux:
- CMake (versiion 3.1 or better)
- g++ and/or gcc (C99 works, C++11 is better)
- boost (sudo apt-get install libboost-all-dev - make sure /usr/include/boost/property_tree has stuff)
- make (GNU)

Win7/10:
- Cmake (version 3.1 or better)
- mingw(64) - standard C99 / C++11 works
- boost (https://sourceforge.net/projects/boost/files/boost-binaries)
- make

You can use Visual Studio 2017/2019 - you will need to tweak CMake



Build - gcc/mingw:
-----------------
2) Go to '<repo>/cMoon/build' directory:
    cd build
3) Create make file:
    cmake ..
4) Make executable:
    make
5) Run program:
    ./cMoon

Linux (CMake) - Re-build
---------------------
1) Go to "<repo>/cMoon/build" directory:
	cd build
2) Clear out previous 'build' contents:
    - CMakeFiles (dir)
	- CMakeCache.txt
	- Makefile
	- cmake_install.cmake
	- cMoon (executable, if you want to remove old code)
3) Make sure you have 'cMoonConfig.h' in the 'build' directory
4) Run CMake:
	cmake ..
5) Make:
	make
6) Run program:
	./cMoon

Debugging (when necessary):
---------
1) Rerun CMake using (from "build" directory):
	cmake -DCMAKE_BUILD_TYPE=Debug ..
2) Use gdb

Working with Visual Studio Code:
-------------------------------
- Open directory 'folder' to <repo>/cMoon

